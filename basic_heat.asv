function [t_vals, x_vals, X_analytical, X, U_sol, t_sol, delta_x, delta_y] = basic_heat(t_iter, x_iter)    
    t_0 = 0;
    t_f = pi/16;
    t_vals = linspace(t_0, t_f, t_iter);
    
    L = 3;
    X = zeros(t_iter, x_iter);
    x_0 = @(x) sin(pi*x) + sin(2*pi*x);
    x_vals = linspace(0,L,x_iter);
    X(1, :) = x_0(x_vals);
    X(:,1) = 0;
    X(:,end) = 0;
    
    K = zeros(4, x_iter);
    delta_y = t_vals(2) - t_vals(1);
    delta_x = x_vals(2) - x_vals(1);
    alpha = 2;
    
    if delta_y > 0.5*delta_x^2/alpha
        fprintf('Upper Bound: %g\n', 0.5*delta_x^2/alpha)
        fprintf('Delta t: %g\n', delta_y)
        disp("Unstable, increase t_iter or decrease x_iter")
        return
    end
    
    for i = 2 : t_iter
        K(1,2:x_iter-1) = (X(i-1,3:x_iter) - 2*X(i-1,2:x_iter-1) + X(i-1,1:x_iter-2))/delta_x^2;
        K(2,2:x_iter-1) = ((X(i-1,3:x_iter) + (delta_y/2)*K(1,3:x_iter)) - 2*(X(i-1,2:x_iter-1) + (delta_y/2)*K(1,2:x_iter-1)) + (X(i-1,1:x_iter-2) + (delta_y/2)*K(1,1:x_iter-2)))/delta_x^2;
        K(3,2:x_iter-1) = ((X(i-1,3:x_iter) + (delta_y/2)*K(2,3:x_iter)) - 2*(X(i-1,2:x_iter-1) + (delta_y/2)*K(2,2:x_iter-1)) + (X(i-1,1:x_iter-2) + (delta_y/2)*K(2,1:x_iter-2)))/delta_x^2;
        K(4,2:x_iter-1) = ((X(i-1,3:x_iter) + (delta_y)*K(3,3:x_iter)) - 2*(X(i-1,2:x_iter-1) + (delta_y)*K(3,2:x_iter-1)) + (X(i-1,1:x_iter-2) + (delta_y)*K(3,1:x_iter-2)))/delta_x^2;
    
        X(i,:) = X(i-1,:) + (delta_y/6)*(K(1,:) + K(2,:) + K(3,:) + K(4,:));
        
    end
    
    X_analytical = zeros(t_iter, x_iter);
    
    f = @(x,t) exp(-2*pi^2*t)*sin(pi*x) + exp(-8*pi^2*t)*sin(2*pi*x);
    
    for i = 1:length(t_vals)
        for j = 2:length(x_vals) - 1
            X_analytical(i,j) = f(x_vals(j),t_vals(i));
        end
    end
    
    U0 = x_0(x_vals);
    tspan = t_vals;
end


function dUdt = heatODE(t, U, alpha, delta_x, x_iter)
    dUdt = zeros(x_iter,1);
    
    % Boundary conditions (example: Dirichlet - fixed endpoints)
    U(1) = 0;        % u(0,t) boundary (fixed)
    U(x_iter) = 0;        % u(L,t) boundary (fixed)

    % Interior points (second-order finite difference)
    for i = 2:x_iter-1
        dUdt(i) = alpha*(U(i+1)-2*U(i)+U(i-1))/delta_x^2;
    end
end